var documenterSearchIndex = {"docs":
[{"location":"Example.html#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"Example.html","page":"Example","title":"Example","text":"using Vicon\n\n# initialize Vicon\nvicon = ViconSystem(;port=51001);\n\n# Set World origin\nset_world!(vicon, [0; 0; 0], [1 0 0; 0 1 0; 0 0 1]);\nset_world!(vicon, \"Origin_Object\") # Set World origin based on a given item\n\n# read from Vicon System\nitemVector = read_vicon(vicon); # read items from Vicon System\nprintln(\"Found \", length(itemVector), \" items.\");\n\nItemName = \"Object1\";\nitem1 = read_vicon(vicon, ItemName); # read \"Object1\" from Vicon System\nprintln(\"Position of \", ItemName, \": \", item1.x_m , \", in Vicon frame.\")\n\n# transform to World\nitem1_W = transform_to_world(vicon, item1);\nprintln(\"Position of \", ItemName, \": \", item1_W.x_m , \", in World frame.\")\n\n# measure input frequenzy\nmeasure_input_frequenzy(vicon);\n\n\n# start asyncron read from Vicon System\nget_latest_item, stop_read_vicon_async = start_async_read(vicon, ItemName);\n\nfor i in 1:100\n    item1 = get_latest_item() # get latest item from asyncron read\n    item1_W = transform_to_world(vicon, item1)\n    println(\"Position of \", ItemName, \": \", item1_W.x_m , \", in World frame.\")\n    sleep(0.012)\nend\n\nstop_read_vicon_async();\n\n# close UDP socket\nclose_vicon(vicon)","category":"page"},{"location":"ViconConfig.html#Vicon-Tracker-configuration","page":"Vicon config","title":"Vicon Tracker configuration","text":"","category":"section"},{"location":"ViconConfig.html","page":"Vicon config","title":"Vicon config","text":"On the System tab, when you click on the Local Vicon System node, the following settings are available in the UDP Object Stream section of the Properties pane. (Image: UDP_window)","category":"page"},{"location":"ViconConfig.html#UDP-stream","page":"Vicon config","title":"UDP stream","text":"","category":"section"},{"location":"ViconConfig.html","page":"Vicon config","title":"Vicon config","text":"info: Vicon DataStream SDK\nThe UDP stream (used here) contains only a small subset of the data that is available via the Vicon DataStream SDK.","category":"page"},{"location":"ViconConfig.html","page":"Vicon config","title":"Vicon config","text":"Content Byte Type comment\nItemID 1 UInt8 \nItemDataSize 2 UInt16 72\nItemName 24 Char[] zero padding\nTransX 8 Float64 in mm\nTransY 8 Float64 in mm\nTransZ 8 Float64 in mm\nRotX 8 Float64 \nRotY 8 Float64 \nRotZ 8 Float64 ","category":"page"},{"location":"index.html#Vicon-UDP-interface","page":"Vicon UDP interface","title":"Vicon UDP interface","text":"","category":"section"},{"location":"index.html","page":"Vicon UDP interface","title":"Vicon UDP interface","text":"This packet receives the UDP packets from a Vicon system and interprets them.","category":"page"},{"location":"index.html","page":"Vicon UDP interface","title":"Vicon UDP interface","text":"warning: Vicon DataStream SDK\nThe Vicon DataStream SDK is not used here! Only the position and orientation of objects can be read via the UDP packages.","category":"page"},{"location":"index.html#Autor","page":"Vicon UDP interface","title":"Autor","text":"","category":"section"},{"location":"index.html","page":"Vicon UDP interface","title":"Vicon UDP interface","text":"Finn Süberkrüb","category":"page"},{"location":"index.html","page":"Vicon UDP interface","title":"Vicon UDP interface","text":"Vicon.jl@rpex.de","category":"page"},{"location":"Module.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"Module.html","page":"Functions","title":"Functions","text":"Modules = [Vicon]\nOrder   = [:function, :type]","category":"page"},{"location":"Module.html#Main.Vicon.clear_UDP_buffer-Tuple{Main.Vicon.ViconSystem}","page":"Functions","title":"Main.Vicon.clear_UDP_buffer","text":"clear_UDP_buffer(vicon::ViconSystem)\n\nHelper function that clears the UDP buffer. The timestamp is set as soon as the packet is read. No timestamp is transmitted via the UDP interface. The UDP buffer must therefore be cleard before reading starts.\n\nTODO: Is there a better variant via the Julia socket?\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.close_vicon-Tuple{Main.Vicon.ViconSystem}","page":"Functions","title":"Main.Vicon.close_vicon","text":"close_vicon(vicon::ViconSystem)\n\ntakes the byte_string from the Vicon UDP socket and returns a Vector of ItemStructs\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.measure_input_frequenzy-Tuple{Main.Vicon.ViconSystem}","page":"Functions","title":"Main.Vicon.measure_input_frequenzy","text":"measure_input_frequenzy(byte_string::Vector{UInt8})\n\ntakes the byte_string from the Vicon UDP socket and returns a Vector of ItemStructs\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.read_vicon-Tuple{Main.Vicon.ViconSystem, String}","page":"Functions","title":"Main.Vicon.read_vicon","text":"read_vicon(vicon::ViconSystem)\n\nreads a UDP package and returns the selected item.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.read_vicon-Tuple{Main.Vicon.ViconSystem}","page":"Functions","title":"Main.Vicon.read_vicon","text":"read_vicon(vicon::ViconSystem)\n\nreads a UDP package and returns a vector of items.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.reinterpret_Vicon-Tuple{Vector{UInt8}, Int64}","page":"Functions","title":"Main.Vicon.reinterpret_Vicon","text":"reinterpret_Vicon(byte_string::Vector{UInt8})\n\ntakes the byte_string from the Vicon UDP socket and returns a Vector of raw ItemStructs\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.set_world!-Tuple{Main.Vicon.ViconSystem, String}","page":"Functions","title":"Main.Vicon.set_world!","text":"set_world!(vicon::ViconSystem, ItemName::String)\n\nSet transformation from Vicon System to World based on a given item.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.set_world!-Tuple{Main.Vicon.ViconSystem, Vector{T} where T, Matrix{T} where T}","page":"Functions","title":"Main.Vicon.set_world!","text":"set_world!(vicon::ViconSystem, x_Vicon2World_m::Vector, R_Vicon2World::Matrix)\n\nSet manual transformation from Vicon System to World.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.start_async_read-Tuple{Main.Vicon.ViconSystem, String}","page":"Functions","title":"Main.Vicon.start_async_read","text":"start_async_read(vicon::ViconSystem, ItemName::String, buffer_size = 10)\n\nStarts a asyncron read from Vicon System. Returns a function that returns the latest item. buffer_size is the size of the Channel sending data from the async task.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.transform_to_world-Tuple{Main.Vicon.ViconSystem, Main.Vicon.ItemStruct}","page":"Functions","title":"Main.Vicon.transform_to_world","text":"transform_to_world(vicon::ViconSystem, Item::ItemStruct)\n\nSet transformation from Vicon System to World based on a given item.\n\n\n\n\n\n","category":"method"},{"location":"Module.html#Main.Vicon.ItemStruct","page":"Functions","title":"Main.Vicon.ItemStruct","text":"ItemStruct\n\nStruct for the Vicon UDP data\n\n\n\n\n\n","category":"type"},{"location":"Module.html#Main.Vicon.ViconSystem","page":"Functions","title":"Main.Vicon.ViconSystem","text":"ViconSystem\n\nStruct for the Vicon System.  Opens the UDP socket and binds it to the given ip and port.\n\n\n\n\n\n","category":"type"}]
}
